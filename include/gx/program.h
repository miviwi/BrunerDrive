#pragma once

#include <gx/gx.h>

#include <exception>
#include <stdexcept>
#include <string>
#include <vector>
#include <unordered_map>
#include <string_view>
#include <optional>
#include <tuple>

namespace brdrive {

// Forward declaration
class GLTexImageUnit;

class GLShader {
public:
  enum Type {
    Invalid,

    Vertex,
    TessControl, TessEvaluation,
    Geometry, Fragment,

    Compute,
  };

  enum : int {
    DefaultGLSLVersion = 330,
  };

  struct CompileError : public std::runtime_error {
    CompileError() :
      std::runtime_error("failed to compile() to GLShader!")
    { }
  };

  struct GLSLVersionRedefinitionError : std::runtime_error {
    GLSLVersionRedefinitionError() :
      std::runtime_error("attempted to redefine the shader's GLSL version!"
          " (more than one glslVersion() call was made")
    { }
  };

  struct InvalidDefineIdentifierError : public std::runtime_error {
    InvalidDefineIdentifierError() :
      std::runtime_error("the 'identifier' for define() can contain only"
          " alphanumeric characters [a-zA-Z0-9] and underscores [_]"
          " additionally it MUST NOT start with a number")
    { }
  };

  GLShader(Type type);
  GLShader(const GLShader&) = delete;
  GLShader(GLShader&& other);
  ~GLShader();

  auto id() const -> GLObject;

  // Prepends:
  //      #version <ver>
  //   to the very start of the sources
  //  - This method can be called only ONCE
  //    on a given shader. Futher calls
  //    will cause exceptions to be thrown.
  //  - If glslVersion() doesn't get called
  //      #version <GLShader::DefaultGLSLVersion>
  //    will be prepended to the sources
  //    by default
  //  - 'ver' can be < 0 which inhibits
  //    adding the default version directive
  //  - If the 'src' passed to the first
  //    source() call starts with a #version
  //    directive, it will be swapped out
  //    with the one generated by this method
  auto glslVersion(int ver) -> GLShader&;

  // Appends 'src' to this shader's source code
  //   - The memory pointed to by 'src' MUST remain
  //     valid until compile() is called, otherwise
  //     UB/crashes WILL occur
  auto source(std::string_view src) -> GLShader&;

  // Defines a symbol by prepending -
  //     #define <identifier> [value]
  //   to the shader's source code
  //  - <identifier> is always a part
  //    of the prepended line, while
  //    [value] is optional, so leaving
  //    it out is allowed
  //  - If an <identifier> which uses
  //    disallowed characters is given -
  //    an exception will be thrown
  //  - It's recommended to add defines
  //    before the sources as the defines
  //    require prepending, which is a
  //    slow operation of the data
  //    structure used internally
  auto define(const char *identifier, const char *value = nullptr) -> GLShader&;

  // Must be called after appending all the sources
  auto compile() -> GLShader&;

  // Returns 'true' if the GLShader has been
  //   compiled sucessfully
  auto compiled() const -> bool;

  auto infoLog() const -> std::optional<std::string>;

private:
  enum StateFlags : u32 {
    VersionStateMask  = 0b00000011,
    VersionStateShift = 0,

    VersionStateUseDefault     = 0,
    VersionStateInhibitDefault = 1,
    VersionStateVersionGiven   = 2,

    DefinesStateMask  = 0b00000100,
    DefinesStateShift = 2,

    DefinesStateInsertingRequired = 1,
  };

  GLEnum type_;
  GLObject id_;

  bool compiled_;

  // Initialized with 0, which means:
  //   - VersionStateUseDefault
  //   - !DefinesStateInsertingRequired
  u32 sources_state_flags_;

  // Initialized with DefaultGLSLVersion
  int version_;

  // 'sources_' stores std::string_view's so the data
  //   they point to must be owned by someone, in the
  //   case of sources that's the responsibility of
  //   the caller - on the other hand, because the
  //   the text of the #defines is generated by
  //   the GLShader itself, we need to keep their
  //   data in the shader object itself
  std::optional<std::vector<std::string>> defines_;

  std::vector<std::string_view> sources_;
};

class GLProgram {
public:
  using UniformLocation = int;

  enum : UniformLocation {
    InvalidLocation = -1,
  };

  enum UniformType {
    InvalidType,

    Int, UInt, Float,
    IVec2, UIVec2, Vec2,
    IVec3, UIVec3, Vec3,
    IVec4, UIVec4, Vec4,
    Mat3x3, Mat4x3, Mat4x4,

    TexImageUnit,
  };

  struct LinkError : public std::runtime_error {
    LinkError() :
      std::runtime_error("linking the GLProgram failed!")
    { }
  };

  struct UniformTypeError : public std::runtime_error {
    UniformTypeError() :
      std::runtime_error("attempted to upload a uniform with"
          " a different type than initially!")
    { }
  };

  GLProgram();
  GLProgram(const GLProgram&) = delete;
  GLProgram(GLProgram&& other);
  ~GLProgram();

  auto attach(const GLShader& shader) -> GLProgram&;
  auto detach(const GLShader& shader) -> GLProgram&;

  // - Can be called only AFTER attach()'ing all shaders
  // - Must be called BEFORE the program is bound to the
  //   pipeline
  auto link() -> GLProgram&;
  // Returns 'true' if link() was previously
  //   called (and succeeded) on this program
  auto linked() const -> bool;

  // Returns a string containing error messages
  //   after a LinkError() is thrown
  auto infoLog() const -> std::optional<std::string>;

  // Bind the program to the pipeline
  //   - Can ONLY be called if linked() == true
  auto use() -> GLProgram&;
  
  auto uniform(const char *name, int i) -> GLProgram&;
  auto uniform(const char *name, float f) -> GLProgram&;
  auto uniform(const char *name, const GLTexImageUnit& tex_unit) -> GLProgram&;

private:
  using UniformLocationType = std::tuple<UniformLocation, UniformType>;

  auto uniformLocationType(const char *name, UniformType type) -> UniformLocationType;

  GLObject id_;
  bool linked_;

  // Lazy-initialized when uploading a uniform for the first time
  std::unordered_map<std::string, UniformLocationType> uniforms_;
};

}
